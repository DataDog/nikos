version: 2.1

jobs:
  test:
    parameters:
      platform:
        type: string
      test_type:
        type: string
    machine:
      image: android:202102-01
    steps:
      - checkout
      - restore_caches
      - setup
      - save_caches
      - build_nikos
      - set_permissions
      - molecule_test:
          platform: << parameters.platform >>
          test_type: << parameters.test_type >>

workflows:
  all-tests:
    jobs:
      - test:
          matrix:
            parameters:
              platform: ["fedora", "centos", "opensuse", "debian", "ubuntu"]
              test_type: ["host", "container"]

commands:
  restore_caches:
    steps:
      - restore_cache:
          keys:
            - apt-dependencies-v2-{{ checksum ".circleci/apt-requirements.txt"  }}
      
      - restore_cache:
          keys:
            - go-dependencies-v1-{{ checksum "go.mod"  }}

      - restore_cache:
          keys:
            - python-dependencies-v1-{{ checksum ".circleci/requirements.txt" }}

  setup:
    description: "Set up build env & install all dependencies"
    steps:
      - run: 
          name: Install vagrant
          command: |
            sudo wget -nv https://releases.hashicorp.com/vagrant/2.3.1/vagrant_2.3.1-1_amd64.deb
            sudo dpkg -i vagrant_2.3.1-1_amd64.deb

      - run:
          name: Install libvirt & qemu
          command: |
            # Download any requirements that aren't already in the cache
            sudo mkdir -p apt-cache/archives
            update_needed=true
            while read p; do
              if ! ls apt-cache/archives | grep -q $p; then
                if $update_needed; then
                  # Only update apt-get before downloading the first package
                  sudo apt-get update
                  update_needed=false
                fi
                sudo apt-get install -y --download-only -o dir::cache=`pwd`/apt-cache -o Debug::NoLocking=1 $p
              fi
            done <.circleci/apt-requirements.txt
            sudo chown -R $(whoami) apt-cache

            # Install all packages in the cache
            sudo dpkg -i apt-cache/archives/*.deb

      - run:
          name: Install vagrant-libvirt plugin
          command: vagrant plugin install vagrant-libvirt
      
      - run:
          name: Install Go 1.18
          command: |
            eval "$(curl -sL https://raw.githubusercontent.com/travis-ci/gimme/master/gimme | GIMME_GO_VERSION=1.18 bash)"
            echo 'export GOROOT=/home/circleci/.gimme/versions/go1.18.linux.amd64' >> $BASH_ENV
            echo 'export PATH=$GOROOT/bin:$PATH' >> $BASH_ENV
        
      - run:
          name: Install go dependencies
          command: go mod download

      - run:
          name: Install python dependencies
          command: |
            virtualenv -p /opt/circleci/.pyenv/shims/python3 venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r .circleci/requirements.txt

  save_caches:
    steps:
      - save_cache:
          paths:
            - apt-cache
          key: apt-dependencies-v2-{{ checksum ".circleci/apt-requirements.txt"  }}

      - save_cache:
          paths:
            - /home/circleci/go/pkg/mod
          key: go-dependencies-v1-{{ checksum "go.mod"  }}

      - save_cache:
          paths:
            - ./venv
          key: python-dependencies-v1-{{ checksum ".circleci/requirements.txt" }}

  build_nikos:
    steps:
      - run: 
          name: Build the nikos binary
          command: bash .ci_build/build_install_nikos.sh . .ci_build/nikos-libs.tar.gz

  set_permissions:
    steps:
      - run:
          name: Set permissions needed for molecule to run
          command: sudo chown -R $(whoami) /var/run/libvirt/libvirt-sock

  molecule_test:
    parameters:
      platform:
        type: string
      test_type:
        type: string
    steps:
      - run:
          name: Run molecule tests
          no_output_timeout: 30m
          command: |
            source venv/bin/activate
            cd tests
            molecule test -s << parameters.platform >>-<< parameters.test_type >>